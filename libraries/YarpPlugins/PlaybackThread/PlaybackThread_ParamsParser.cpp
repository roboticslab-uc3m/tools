/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Apr 17 12:02:47 2025


#include "PlaybackThread_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(PlaybackThreadParamsCOMPONENT, "yarp.device.PlaybackThread")
}


PlaybackThread_ParamsParser::PlaybackThread_ParamsParser()
{
}


std::vector<std::string> PlaybackThread_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("file");
    params.push_back("timeIdx");
    params.push_back("timeScale");
    params.push_back("mask");
    return params;
}


bool      PlaybackThread_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(PlaybackThreadParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter file
    {
        if (config.check("file"))
        {
            m_file = config.find("file").asString();
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'file' using value:" << m_file;
        }
        else
        {
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'file' using DEFAULT value:" << m_file;
        }
        prop_check.unput("file");
    }

    //Parser of parameter timeIdx
    {
        if (config.check("timeIdx"))
        {
            m_timeIdx = config.find("timeIdx").asInt64();
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'timeIdx' using value:" << m_timeIdx;
        }
        else
        {
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'timeIdx' using DEFAULT value:" << m_timeIdx;
        }
        prop_check.unput("timeIdx");
    }

    //Parser of parameter timeScale
    {
        if (config.check("timeScale"))
        {
            m_timeScale = config.find("timeScale").asFloat64();
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'timeScale' using value:" << m_timeScale;
        }
        else
        {
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'timeScale' using DEFAULT value:" << m_timeScale;
        }
        prop_check.unput("timeScale");
    }

    //Parser of parameter mask
    {
        if (config.check("mask"))
        {
            {
                m_mask.clear();
                yarp::os::Bottle* tempBot = config.find("mask").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_mask.push_back(tempBot->get(i).asInt64());
                    }
                }
                else
                {
                     yCError(PlaybackThreadParamsCOMPONENT) <<"parameter 'mask' is not a properly formatted bottle";
                }
            }
            yCInfo(PlaybackThreadParamsCOMPONENT) << "Parameter 'mask' using value:" << m_mask;
        }
        else
        {
            yCError(PlaybackThreadParamsCOMPONENT) << "Mandatory parameter 'mask' not found!";
            yCError(PlaybackThreadParamsCOMPONENT) << "Description of the parameter: filter to apply to each item in a row";
            return false;
        }
        prop_check.unput("mask");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(PlaybackThreadParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(PlaybackThreadParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      PlaybackThread_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: PlaybackThread\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'file': file name\n");
    doc = doc + std::string("'timeIdx': index of timestamp\n");
    doc = doc + std::string("'timeScale': time scaling of timestamp\n");
    doc = doc + std::string("'mask': filter to apply to each item in a row\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device PlaybackThread --file test.txt --timeIdx 0 --timeScale 1.0 --mask <mandatory_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device PlaybackThread --mask <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
